#!/bin/zsh

usage='diff_sbo [-i] [-s] [-q] [--diff-opts=] <pkgpaths>

Show diff between your working copy and the one in the official SBo repo.

You can specify multiple paths at one time. Exit stat 2 means there is some
difference between SBo and yours. Exit stat 128 means that it failed to find
some packages or found multiple ones in SBo repo.

The options set by --diff-opts will be passed to diff.

 -i, the output will surpass the uniq files.
 -s, synchronize with SBo repo.
 -q, quiet mode. It will tell you what pkg have diff but dont show them.'

export LC_ALL=C
TMP=${TMP:-/tmp}

while echo "$1" | grep -q -e '^-'; do
	case "$1" in
	'-h' | '--help' )
	echo "$usage"
	exit
	;;
	'--diff-opts='* )
	diff_opts=${1/--diff-opts=/}
	;;
	'-i' )
	ign_f=y
	;;
	'-s' )
	do_sync=y
	;;
	'-q' )
	quiet=y
	;;
	esac
	shift
done

if [ $# -eq 0 ]; then
	echo "$usage"
	echo
	echo "Please tell me which pkgpath to check."
	exit 1
fi

[ -r ~/.sbo-dev-helper.cfg ] && . ~/.sbo-dev-helper.cfg
# TODO: what if the user don't have local copy of SBo?
if [ -z "$SBO_DIR" ]; then
	echo "$usage"
	echo
	echo "Please tell me where is the local copy located with SBO_DIR variable."
	exit 3
fi

echo_sep() {
	echo "====================== $@ ==========================="
}

filter_diff() {
	if [ "$ign_f" = y ]; then
		grep -v -e '^Only in '
	else
		cat
	fi
}

while [ $# -ne 0 ]; do
	[ ! -d $1 ] && { shift; continue; }
	PKGNAM=$(basename $1)
	PKGDIR=$(dirname $1)
	SPKGDIR=($(find $SBO_DIR/ -type d -name "$PKGNAM"))
	if [ ${#SPKGDIR} -eq 0 ]; then
		echo "No package $PKGNAM found in $SBO_DIR"
		not_found=1
	elif [ ${#SPKGDIR} -gt 1 ]; then
		echo "More than one package named $PKGNAM found in $SBO_DIR"
		echo "Please diff between them manually. Sorry."
		not_found=1
	else
		if [ "$do_sync" = 'y' ]; then
			echo "Sync $PKGNAM"
			cp -af "$SPKGDIR"/* "$PKGDIR"/"$PKGNAM"/
			shift
			continue
		fi
		# hope the *~ files are always backups...
		diff -ur ${=diff_opts} -x '*~' $PKGDIR/$PKGNAM $SPKGDIR/ | filter_diff > $TMP/$$
		if [ "$(cat $TMP/$$ | wc -l)" -gt 1 ]; then
			echo_sep $1
			if [ "$quiet" != 'y' ]; then
				cat $TMP/$$
				echo_sep $1
			fi
			dirty=1
		fi
		echo > $TMP/$$
	fi
	shift
done

if [ "$not_found" ]; then
	exit 128
elif [ "$dirty" ]; then
	exit 2
fi
